"use strict";(self.webpackChunkmodelence_docs=self.webpackChunkmodelence_docs||[]).push([[975],{2977:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"api-reference/react-query/index","title":"React Query Integration","description":"","source":"@site/content/api-reference/react-query/index.md","sourceDirName":"api-reference/react-query","slug":"/api-reference/react-query/","permalink":"/api-reference/react-query/","draft":false,"unlisted":false,"editUrl":"https://github.com/modelence/modelence/tree/main/docs/content/api-reference/react-query/index.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"React Query Integration"},"sidebar":"apiSidebar","previous":{"title":"Module","permalink":"/api-reference/module"},"next":{"title":"modelenceQuery","permalink":"/api-reference/react-query/useQuery"}}');var i=t(4848),o=t(8453);function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"modelencereact-query",children:"@modelence/react-query"})}),"\n",(0,i.jsx)(n.p,{children:"React Query utilities for Modelence method calls."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm i @modelence/react-query @tanstack/react-query\n"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["This package provides ",(0,i.jsx)(n.code,{children:"modelenceQuery"})," and ",(0,i.jsx)(n.code,{children:"modelenceMutation"})," factory functions that can be used with TanStack Query's native ",(0,i.jsx)(n.code,{children:"useQuery"})," and ",(0,i.jsx)(n.code,{children:"useMutation"})," hooks. This approach, recommended by TanStack, gives you direct access to TanStack Query's full API while providing Modelence-specific query configurations."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-query",children:"Basic Query"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useQuery } from '@tanstack/react-query';\nimport { modelenceQuery } from '@modelence/react-query';\n\nfunction TodoList() {\n  const { data, isPending, error } = useQuery(\n    modelenceQuery('todo.getAll', { limit: 10 })\n  );\n  \n  if (isPending) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n  \n  return (\n    <div>\n      {data?.map(todo => (\n        <div key={todo.id}>{todo.title}</div>\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-mutation",children:"Basic Mutation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { modelenceMutation } from '@modelence/react-query';\n\nfunction CreateTodo() {\n  const queryClient = useQueryClient();\n  \n  const { mutate: createTodo, isPending } = useMutation({\n    ...modelenceMutation('todo.create'),\n    onSuccess: () => {\n      // Invalidate and refetch todos\n      queryClient.invalidateQueries({ queryKey: ['todo.getAll'] });\n    },\n  });\n  \n  return (\n    <button \n      onClick={() => createTodo({ title: 'New Todo', completed: false })}\n      disabled={isPending}\n    >\n      {isPending ? 'Creating...' : 'Create Todo'}\n    </button>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.h4,{id:"query-with-additional-options",children:"Query with Additional Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useQuery } from '@tanstack/react-query';\nimport { modelenceQuery } from '@modelence/react-query';\n\nfunction TodoDetail({ id }: { id: string }) {\n  const { data: todo } = useQuery({\n    ...modelenceQuery('todo.getById', { id }),\n    enabled: !!id, // Only run query if id exists\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n  });\n  \n  return <div>{todo?.title}</div>;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"mutation-with-default-args",children:"Mutation with Default Args"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useMutation } from '@tanstack/react-query';\nimport { modelenceMutation } from '@modelence/react-query';\n\nfunction UpdateTodo({ todoId }: { todoId: string }) {\n  const { mutate: updateTodo } = useMutation({\n    ...modelenceMutation('todo.update', { id: todoId }), // Default args\n    onSuccess: (data) => {\n      console.log('Todo updated:', data);\n    },\n  });\n  \n  return (\n    <button onClick={() => updateTodo({ title: 'Updated Title' })}>\n      Update Todo\n    </button>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"manual-cache-operations",children:"Manual Cache Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useQueryClient } from '@tanstack/react-query';\nimport { createQueryKey, modelenceQuery } from '@modelence/react-query';\n\nfunction TodoActions() {\n  const queryClient = useQueryClient();\n  \n  const refreshTodos = () => {\n    queryClient.invalidateQueries({ \n      queryKey: createQueryKey('todo.getAll', { limit: 10 }) \n    });\n  };\n  \n  const prefetchTodo = (id: string) => {\n    queryClient.prefetchQuery({\n      ...modelenceQuery('todo.getById', { id }),\n      staleTime: 10 * 60 * 1000, // 10 minutes\n    });\n  };\n  \n  return (\n    <div>\n      <button onClick={refreshTodos}>Refresh Todos</button>\n      <button onClick={() => prefetchTodo('123')}>Prefetch Todo</button>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"modelencequerytmethodname-args",children:(0,i.jsx)(n.code,{children:"modelenceQuery<T>(methodName, args?)"})}),"\n",(0,i.jsxs)(n.p,{children:["Creates a query configuration object for use with TanStack Query's ",(0,i.jsx)(n.code,{children:"useQuery"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"methodName"})," (string): The Modelence method name (e.g., 'todo.getAll')"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"args"})," (object, optional): Arguments to pass to the method"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Query configuration object with ",(0,i.jsx)(n.code,{children:"queryKey"})," and ",(0,i.jsx)(n.code,{children:"queryFn"})]}),"\n",(0,i.jsx)(n.h3,{id:"modelencemutationt-tvariablesmethodname-defaultargs",children:(0,i.jsx)(n.code,{children:"modelenceMutation<T, TVariables>(methodName, defaultArgs?)"})}),"\n",(0,i.jsxs)(n.p,{children:["Creates a mutation configuration object for use with TanStack Query's ",(0,i.jsx)(n.code,{children:"useMutation"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"methodName"})," (string): The Modelence method name (e.g., 'todo.create')"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"defaultArgs"})," (object, optional): Default arguments merged with mutation variables"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Mutation configuration object with ",(0,i.jsx)(n.code,{children:"mutationFn"})]}),"\n",(0,i.jsx)(n.h3,{id:"createquerykeyt-umethodname-args",children:(0,i.jsx)(n.code,{children:"createQueryKey<T, U>(methodName, args?)"})}),"\n",(0,i.jsx)(n.p,{children:"Utility function to create typed query keys for manual cache operations."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"methodName"})," (T): The method name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"args"})," (U, optional): The arguments"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Typed query key array"]}),"\n",(0,i.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Full TanStack Query API"}),": Access to all TanStack Query features and options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple and Explicit"}),": Clear separation between Modelence configuration and TanStack Query options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better TypeScript Support"}),": Improved type inference and safety"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Familiar API"}),": Standard TanStack Query patterns that developers already know"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future-Proof"}),": Easy to adopt new TanStack Query features as they're released"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Composability"}),": Easy to combine with other TanStack Query utilities"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}const s={sidebar_position:0,title:"React Query Integration"},c=void 0,l={},u=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Query",id:"basic-query",level:3},{value:"Basic Mutation",id:"basic-mutation",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3},{value:"Query with Additional Options",id:"query-with-additional-options",level:4},{value:"Mutation with Default Args",id:"mutation-with-default-args",level:4},{value:"Manual Cache Operations",id:"manual-cache-operations",level:4},{value:"API Reference",id:"api-reference",level:2},{value:"<code>modelenceQuery&lt;T&gt;(methodName, args?)</code>",id:"modelencequerytmethodname-args",level:3},{value:"<code>modelenceMutation&lt;T, TVariables&gt;(methodName, defaultArgs?)</code>",id:"modelencemutationt-tvariablesmethodname-defaultargs",level:3},{value:"<code>createQueryKey&lt;T, U&gt;(methodName, args?)</code>",id:"createquerykeyt-umethodname-args",level:3},{value:"Benefits",id:"benefits",level:2}];function h(e){return(0,i.jsx)(d,{})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h()}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);