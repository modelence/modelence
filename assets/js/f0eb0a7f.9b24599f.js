"use strict";(self.webpackChunkmodelence_docs=self.webpackChunkmodelence_docs||[]).push([[586],{4979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"api-reference/react-query/useMutation","title":"modelenceMutation","description":"","source":"@site/content/api-reference/react-query/useMutation.md","sourceDirName":"api-reference/react-query","slug":"/api-reference/react-query/useMutation","permalink":"/api-reference/react-query/useMutation","draft":false,"unlisted":false,"editUrl":"https://github.com/modelence/modelence/tree/main/docs/content/api-reference/react-query/useMutation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"apiSidebar","previous":{"title":"modelenceQuery","permalink":"/api-reference/react-query/useQuery"}}');var a=t(4848),s=t(8453);function i(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"../../../README.md",children:(0,a.jsx)(n.strong,{children:"Documentation"})})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/content/api-reference/README.md",children:"Documentation"})," / ",(0,a.jsx)(n.a,{href:"/content/api-reference/@modelence/react-query/README.md",children:"@modelence/react-query"})," / modelenceMutation"]}),"\n",(0,a.jsx)(n.h1,{id:"function-modelencemutation",children:"Function: modelenceMutation()"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"function modelenceMutation<T>(methodName, defaultArgs): object\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Defined in: ",(0,a.jsx)(n.a,{href:"https://github.com/modelence/modelence/blob/c43ed9bcc41dfca5968ec16c0e62a727ad1a4427/packages/react-query/src/index.ts#L74",children:"index.ts:74"})]}),"\n",(0,a.jsx)(n.p,{children:"Creates mutation options for use with TanStack Query's useMutation hook."}),"\n",(0,a.jsx)(n.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,a.jsx)(n.h3,{id:"t",children:"T"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"T"})," = ",(0,a.jsx)(n.code,{children:"unknown"})]}),"\n",(0,a.jsx)(n.p,{children:"The expected return type of the mutation"}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(n.h3,{id:"methodname",children:"methodName"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"string"})}),"\n",(0,a.jsx)(n.p,{children:"The name of the method to mutate"}),"\n",(0,a.jsx)(n.h3,{id:"defaultargs",children:"defaultArgs"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Args"})," = ",(0,a.jsx)(n.code,{children:"{}"})]}),"\n",(0,a.jsx)(n.p,{children:"Optional default arguments to merge with mutation variables"}),"\n",(0,a.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"object"})}),"\n",(0,a.jsx)(n.p,{children:"Mutation options object for TanStack Query's useMutation"}),"\n",(0,a.jsx)(n.h3,{id:"mutationfn",children:"mutationFn()"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"mutationFn: (variables) => Promise<T>;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,a.jsx)(n.h5,{id:"variables",children:"variables"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Args"})," = ",(0,a.jsx)(n.code,{children:"{}"})]}),"\n",(0,a.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Promise"}),"<",(0,a.jsx)(n.code,{children:"T"}),">"]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { modelenceMutation } from '@modelence/react-query';\n\nfunction MyComponent() {\n  const queryClient = useQueryClient();\n  \n  // Basic usage\n  const { mutate } = useMutation(modelenceMutation('todos.create'));\n\n  // With additional options\n  const { mutate: updateTodo } = useMutation({\n    ...modelenceMutation('todos.update'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos.getAll'] });\n    },\n  });\n\n  return <button onClick={() => mutate({ title: 'New Todo' })}>Create</button>;\n}\n"})})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}const c={sidebar_position:2},d="modelenceMutation",l={},u=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"T",id:"t",level:3},{value:"Parameters",id:"parameters",level:2},{value:"methodName",id:"methodname",level:3},{value:"defaultArgs",id:"defaultargs",level:3},{value:"Returns",id:"returns",level:2},{value:"mutationFn()",id:"mutationfn",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"variables",id:"variables",level:5},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example",level:2}];function h(e){const n={h1:"h1",header:"header",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"modelencemutation",children:"modelenceMutation"})}),"\n","\n",(0,a.jsx)(o,{})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);