#!/usr/bin/env node

process.stdin.setEncoding('utf8');

process.stdin.on('data', (chunk) => {
  // The chunk comes with a file descriptor (fd) property
  // that indicates whether it was stdout (1) or stderr (2)
  const isStderr = chunk.fd === 2;
  
  // You can now format differently based on the source
  if (isStderr) {
    console.error(`[ERROR] ${chunk}`);  // or your custom error formatting
  } else {
    console.log(`[INFO] ${chunk}`);     // or your custom stdout formatting
  }
});

// Handle Ctrl+C and kill commands
process.on('SIGINT', () => {
  console.log('Received SIGINT signal, shutting down logger...');
  process.exit(0);
});
process.on('SIGTERM', () => {
  console.log('Received SIGTERM signal, shutting down logger...');
  process.exit(0);
});

// Handle broken pipe (happens if parent process crashes)
process.stdout.on('error', (err) => {
    if (err.code === 'EPIPE') {
      console.error('Broken pipe detected, shutting down logger...');
      process.exit(0);
    }
  });

process.stdin.on('end', () => {
  // Handle end of input stream
  process.exit(0);
});

// #!/bin/sh
// #"$(dirname "$0")/../node_modules/nodemon/bin/nodemon.js" --watch 'src/**/*.ts' --exec 'tsx' "$@"