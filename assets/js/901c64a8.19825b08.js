"use strict";(self.webpackChunkmodelence_docs=self.webpackChunkmodelence_docs||[]).push([[501],{709:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"quick-start/tutorial-basics/create-a-store","title":"Using a Store","description":"Stores in Modelence are MongoDB collections with built-in TypeScript support, schema and helper methods. They help you:","source":"@site/docs/quick-start/tutorial-basics/create-a-store.md","sourceDirName":"quick-start/tutorial-basics","slug":"/quick-start/tutorial-basics/create-a-store","permalink":"/docs/quick-start/tutorial-basics/create-a-store","draft":false,"unlisted":false,"editUrl":"https://github.com/modelence/modelence/tree/main/docs/docs/quick-start/tutorial-basics/create-a-store.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"quickStartSidebar","previous":{"title":"Tutorial - Basics","permalink":"/docs/category/tutorial---basics"},"next":{"title":"Create a Module","permalink":"/docs/quick-start/tutorial-basics/create-a-module"}}');var s=n(4848),r=n(8453);const i={sidebar_position:1},a="Using a Store",c={},d=[{value:"Create a Store",id:"create-a-store",level:2},{value:"Using the Store",id:"using-the-store",level:2},{value:"Working with Documents",id:"working-with-documents",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"using-a-store",children:"Using a Store"})}),"\n",(0,s.jsx)(t.p,{children:"Stores in Modelence are MongoDB collections with built-in TypeScript support, schema and helper methods. They help you:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Define ",(0,s.jsx)(t.strong,{children:"type-safe schemas"})," for your data"]}),"\n",(0,s.jsxs)(t.li,{children:["Handle ",(0,s.jsx)(t.strong,{children:"CRUD operations"})," with MongoDB"]}),"\n",(0,s.jsxs)(t.li,{children:["Add ",(0,s.jsx)(t.strong,{children:"custom methods"})," to your documents"]}),"\n",(0,s.jsxs)(t.li,{children:["Configure ",(0,s.jsx)(t.strong,{children:"indexes"})," for better performance"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"create-a-store",children:"Create a Store"}),"\n",(0,s.jsx)(t.p,{children:"Create a new store in your module file:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/server/todo/db.ts"',children:"import { Store, schema } from 'modelence';\n\nexport const dbTodos = new Store('todos', {\n  // Define the schema for your documents. Modelence schema is based on and closely resembles Zod types.\n  schema: {\n    title: schema.string(),\n    isCompleted: schema.boolean(), \n    dueDate: schema.date().optional(),\n    userId: schema.userId(), // Built-in Modelence type for user references\n    createdAt: schema.date(),\n  },\n\n  // Configure MongoDB indexes\n  indexes: [\n    { key: { userId: 1 } },\n    { key: { dueDate: 1 } },\n  ],\n\n  // Add custom methods to documents\n  methods: {\n    isOverdue() {\n      return this.dueDate < new Date();\n    }\n  }\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"using-the-store",children:"Using the Store"}),"\n",(0,s.jsx)(t.p,{children:"Once defined, you can use your Store object to perform any operations on your collection."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const { insertedId } = await dbTodos.insertOne({\n  title: 'Buy groceries', \n  isCompleted: false, \n  dueDate: new Date('2023-01-31'),\n  userId: '123',\n  createdAt: new Date()\n});\n\nconst todo = await dbTodos.findById(insertedId);\n\nconsole.log(todo.isOverdue());\n"})}),"\n",(0,s.jsx)(t.h2,{id:"working-with-documents",children:"Working with Documents"}),"\n",(0,s.jsx)(t.p,{children:"Stores provide a comprehensive set of methods for working with MongoDB documents, including finding, inserting, updating, and deleting records. All methods are fully typed with TypeScript."}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"../../api-reference/store",children:"Store API Reference"})," for a complete list of available methods and their usage."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Stores automatically handle MongoDB connection management, collection provisioning and index creation (as you define in the ",(0,s.jsx)(t.code,{children:"indexes"})," array). Just define your store and start using it - Modelence takes care of the rest."]})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);